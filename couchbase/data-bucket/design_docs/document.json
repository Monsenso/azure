{
    "_id": "_design/document",
    "views": {
        "oauth-token": {
            "map": "function map(doc, meta) {\n    'use strict';\n\n    if (doc.type === 'oauth-token') {\n        let latestDataRetrieval = doc.latestDataRetrieval === undefined\n            ? ''\n            : toIsoUtc(doc.latestDataRetrieval);\n\n        emit(latestDataRetrieval, null);\n    }\n\n    /**\n     * Converts a timestamp to an ISO 8601 string in UTC time.\n     * @param {(string|number)} timestamp - An ISO 8601 string or a Unix timestamp\n     *                                      in milliseconds.\n     * @return {string} An ISO 8601 timestamp in UTC time.\n     */\n    function toIsoUtc(timestamp) {\n        let dateObj = new Date(timestamp);\n        return dateObj.toISOString();\n    }\n}"
        },
        "types": {
            "map": "function map(doc, meta) {\n    'use strict';\n\n    if (doc.type) {\n        if (doc.user_id) {\n            emit([ doc.user_id, doc.type ], null);\n            if (doc.date) {\n                emit([ doc.user_id, doc.type, doc.date ], null);\n            }\n\n            switch (doc.type) {\n            case 'thought':\n                let state = doc.thought.state;\n                let timestamp = getThoughtTimestamp(state);\n                let utcTimestamp = toIsoUtc(timestamp);\n                emit([ doc.user_id, doc.type, state, utcTimestamp ], null);\n                break;\n            case 'association':\n                let subtype = doc.accepted ? 'accepted' : 'pending';\n                emit([ doc.user_id, doc.type, subtype ], null);\n                emit([ doc.followerId, doc.type ], null);\n                emit([ doc.followerId, doc.type, subtype ], null);\n                break;\n            }\n        }\n        else if (doc.groups) {\n            let subtype;\n            switch (doc.type) {\n            case 'view-configuration':\n                subtype = doc.viewName;\n                break;\n            }\n\n            doc.groups.forEach(function (gid) {\n                emit([ gid, doc.type ], null);\n\n                if (subtype !== undefined) {\n                    emit([ gid, doc.type, subtype ], null);\n                }\n            });\n        }\n    }\n\n    /**\n     * Gets the timestamp of a \"thought\" document.\n     * @param {string} state - The thought state\n     * @return {string} The ISO 8601 timestamp\n     */\n    function getThoughtTimestamp(state) {\n        switch (state) {\n        case 'ParkedThought':\n            return doc.thought.created;\n        case 'RestructuredThought':\n            return doc.thought.restructure.created;\n        case 'RethoughtThought':\n            return doc.thought.rethought.created;\n        case 'InsightThought':\n            return doc.thought.insight.created;\n        }\n    }\n\n    /**\n     * Converts a timestamp to an ISO 8601 string in UTC time.\n     * @param {(string|number)} timestamp - An ISO 8601 string or a Unix timestamp\n     *                                      in milliseconds.\n     * @return {string} An ISO 8601 timestamp in UTC time.\n     */\n    function toIsoUtc(timestamp) {\n        let dateObj = new Date(timestamp);\n        return dateObj.toISOString();\n    }\n}"
        }
    }
}
