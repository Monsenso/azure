{
    "_id": "_design/attribute",
    "views": {
        "data": {
            "map": "function map(doc, meta) {\n    var doemit = function (attributeId, data, timestamp, authorAccountId) {\n            if (timestamp == null) {\n                timestamp = doc.date;\n            }\n            if (authorAccountId == null) {\n                authorAccountId = doc.authorAccountId;\n            }\n            emit([ doc.user_id, attributeId, timestamp], data);\n\n            if (authorAccountId != null) {\n                emit([ doc.user_id, authorAccountId, attributeId, timestamp], data);\n            }\n        },\n        toRadians = function (value) {\n            return value * Math.PI / 180;\n        },\n        calcDistance = function (lat1, lon1, lat2, lon2) {\n            // http://www.movable-type.co.uk/scripts/latlong.html\n            var R = 6371, // km\n                w1 = toRadians(lat1),\n                w2 = toRadians(lat2),\n                dw = toRadians(lat2 - lat1),\n                dl = toRadians(lon2 - lon1),\n                a,\n                c;\n\n            a = Math.sin(dw / 2) * Math.sin(dw / 2) +\n                Math.cos(w1) * Math.cos(w2) *\n                Math.sin(dl / 2) * Math.sin(dl / 2);\n            c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n            return R * c;\n        },\n        // Returns a Unix timestamp at midnight (00:00:00.000) on the date derived\n        // from the passed timestamp and local time zone offset\n        getLocalMidnightAsUtc = function (date, timeZoneOffset) {\n            if (timeZoneOffset == null && typeof(date) === 'string') {\n                date = new Date(date.substr(0, 10));\n            }\n            else {\n                date = new Date(date || 0);\n            }\n\n            if (timeZoneOffset) {\n                date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n            }\n            return date.setUTCHours(0, 0, 0, 0);\n        },\n        key,\n        date,\n        data,\n        x;\n\n    switch (doc.type) {\n    case 'selfassessment':\n        doemit('self-assessment', 1);\n        for (key in doc.answers) {\n            if (doc.answers.hasOwnProperty(key)) {\n                doemit(key, doc.answers[key]);\n            }\n        }\n        break;\n    case 'self-assessment':\n        date = getLocalMidnightAsUtc(doc.startDateIso);\n        doc.questions.forEach(function (q) {\n            if (q.screenData != null && q.attributeId != null) {\n                doemit(q.attributeId, q.screenData.data, date);\n            }\n        });\n        break;\n    case 'feature':\n        doemit(doc.attributeName, doc.value);\n        break;\n    case 'prediction':\n        function emitPrediction() {\n            var meanValues = doc.predictions.map(function (prediction) {\n                    if (prediction.status === 'success') {\n                        return prediction.result.mean;\n                    }\n                }),\n                upperValues = doc.predictions.map(function (prediction) {\n                    if (prediction.status === 'success') {\n                        return prediction.result.percentiles['97.5'];\n                    }\n                }),\n                lowerValues = doc.predictions.map(function (prediction) {\n                    if (prediction.status === 'success') {\n                        return prediction.result.percentiles['2.5'];\n                    }\n                }),\n                timestamp = (new Date(doc.date)).getTime();\n            doemit('moodPredictionMean', meanValues, timestamp);\n            doemit('moodPredictionUpper', upperValues, timestamp);\n            doemit('moodPredictionLower', lowerValues, timestamp);\n        }\n        emitPrediction();\n        break;\n    case 'skill-state-change':\n        doemit(doc.aid, doc.toState, doc.timestamp);\n        break;\n    case 'patient-rating':\n        doemit('patient-rating', 1);\n        date = new Date('January 1, 2000 00:00:00');\n        doc.questions.forEach(function (q, i) {\n            if (q.attributeName === 'patientRatingDate' && doc.questions[i].answer) {\n                date = new Date(doc.questions[i].answer);\n            }\n        });\n        date = date.getTime();\n        doc.questions.forEach(function (q) {\n            doemit(q.attributeName, q.answer, date);\n        });\n        break;\n    case 'active-trigger':\n        data = {\n            title: doc.title,\n            feedback: doc.feedback,\n            triggerId: doc.triggerId,\n            source: doc.source\n        };\n        if (!doc.archived) {\n            doemit('active-trigger', data);\n        }\n        else {\n            data.activationDate = doc.date;\n            doemit('archived-active-trigger', data, doc.archiveDate);\n        }\n        break;\n    case 'carer-rating':\n        doc.questions.forEach(function (q) {\n            if (q.answer != null) {\n                doemit(q.attributeName, q.answer, doc.startDate);\n            }\n        });\n        break;\n    case 'questionnaire':\n        doc.questions.forEach(function (q) {\n            if (q.answer != null) {\n                var midnight = getLocalMidnightAsUtc(q.timeOfAnswer.utcTime,\n                                                     q.timeOfAnswer.timezoneOffset);\n                doemit(q.attributeName, q.answer, midnight);\n            }\n        });\n        break;\n    case 'questionnaires':\n        Object.values(doc.instances).forEach(function(questionnaire) {\n            questionnaire.questions.forEach(function (q) {\n                if (q.screenData != null && q.attributeId != null) {\n                    var midnight = getLocalMidnightAsUtc(q.screenData.endTime);\n                    doemit(q.attributeId, q.screenData.data, midnight);\n                }\n            });\n        });\n        break;\n    case 'consultations':\n        Object.values(doc.instances).forEach(function(consultation) {\n            if (consultation.preparationQuestionnaire) {\n                consultation.preparationQuestionnaire.questions.forEach(function (q) {\n                    if (q.screenData != null && q.attributeId != null) {\n                        var midnight = getLocalMidnightAsUtc(q.screenData.endTime);\n                        doemit(q.attributeId, q.screenData.data, midnight);\n                    }\n                });\n            }\n            if (consultation.evaluationQuestionnaire) {\n                consultation.evaluationQuestionnaire.questions.forEach(function (q) {\n                    if (q.screenData != null && q.attributeId != null) {\n                        var midnight = getLocalMidnightAsUtc(q.screenData.endTime);\n                        doemit(q.attributeId, q.screenData.data, midnight);\n                    }\n                });\n            }\n        })\n        break;\n    case 'probe-data':\n        switch (doc.dataType) {\n        case 'SMS':\n            function emitSmsFeatures() {\n                var incomingSmss = doc.data.filter(function (sms) {\n                        return sms.type === 1;\n                    }),\n                    outgoingSmss = doc.data.filter(function (sms) {\n                        return sms.type === 2;\n                    }),\n                    incomingSmsCount = incomingSmss.length,\n                    outgoingSmsCount = outgoingSmss.length,\n                    smsMapper = function (msg) {\n                        return {\n                            messageLength: msg.bodyLength,\n                            person: msg.person,\n                            read: msg.read,\n                            time: msg.date\n                        };\n                    };\n                incomingSmss = incomingSmss.map(smsMapper);\n                outgoingSmss = outgoingSmss.map(smsMapper);\n\n                doemit('incomingSmsCount', incomingSmsCount);\n                doemit('outgoingSmsCount', outgoingSmsCount);\n                doemit('incomingSmsList', incomingSmss);\n                doemit('outgoingSmsList', outgoingSmss);\n            }\n\n            emitSmsFeatures();\n\n            break;\n        case 'Call log':\n            function emitCallLogFeatures() {\n                var duration = function (cs) {\n                        return cs.map(function (c) {\n                            return c.duration;\n                        }).reduce(function (a, b) {\n                            return a + b;\n                        }, 0);\n                    },\n                    callMapper = function (call) {\n                        return {\n                            duration: call.duration,\n                            numberAsEntered: call.number,\n                            name: call.name,\n                            numberLabel: call.numberlabel,\n                            numberType: call.numbertype,\n                            time: call.date\n                        };\n                    },\n                    incomingCalls = doc.data.filter(function (call) {\n                        return call.type === 1;\n                    }),\n                    outgoingCalls = doc.data.filter(function (call) {\n                        return call.type === 2;\n                    }),\n                    missedCalls = doc.data.filter(function (call) {\n                        return call.type === 3;\n                    }),\n                    incomingCallCount = incomingCalls.length,\n                    outgoingCallCount = outgoingCalls.length,\n                    missedCallCount = missedCalls.length,\n                    totalCount = incomingCallCount + outgoingCallCount +\n                                 missedCallCount,\n                    incomingCallDuration = duration(incomingCalls),\n                    outgoingCallDuration = duration(outgoingCalls);\n\n                incomingCalls = incomingCalls.map(callMapper);\n                outgoingCalls = outgoingCalls.map(callMapper);\n                missedCalls = missedCalls.map(callMapper);\n\n                doemit('incomingCallCount', incomingCallCount);\n                doemit('outgoingCallCount', outgoingCallCount);\n                doemit('missedCallCount', missedCallCount);\n                doemit('callCount', totalCount);\n                doemit('incomingCallDuration', incomingCallDuration);\n                doemit('outgoingCallDuration', outgoingCallDuration);\n                doemit('callDuration', incomingCallDuration + outgoingCallDuration);\n                doemit('incomingCalls', incomingCalls);\n                doemit('outgoingCalls', outgoingCalls);\n                doemit('missedCalls', missedCalls);\n            }\n\n            emitCallLogFeatures();\n\n            break;\n        case 'Cell tower':\n            function emitCellTowerFeatures() {\n                var registeredTowers = doc.data.map(function (entry) {\n                    var registered = entry.towers.filter(function (tower) {\n                            return tower.isRegistered;\n                        }),\n                        tower;\n                    if (registered.length === 0) {\n                        return null;\n                    }\n                    tower = registered[0];\n                    tower.time = entry.time;\n                    return tower;\n                }).filter(function (tower) {\n                    return tower !== null;\n                });\n\n                doemit('regsteredTowers', registeredTowers);\n                doemit('towers', doc.data);\n            }\n\n            emitCellTowerFeatures();\n            break;\n        case 'Screen on/off':\n            function emitScreenFeatures() {\n                var prevOnTime = 0,\n                    totalScreenOn = 0,\n                    i,\n                    d;\n                for (i = 0; i < doc.data.length; i += 1) {\n                    d = doc.data[i];\n                    if (d.screenOn) {\n                        prevOnTime = d.time;\n                    }\n                    else if (prevOnTime > 0) {\n                        totalScreenOn += d.time - prevOnTime;\n                        prevOnTime = 0;\n                    }\n                }\n                doemit('screen-on-off', doc.data);\n                doemit('total-screen-on-time', totalScreenOn);\n            }\n\n            emitScreenFeatures();\n            break;\n        case 'Step Detector':\n            x = doc.data.map(function (d) {\n                return d.stepCount;\n            }).reduce(function (a, b) {\n                return a + b;\n            }, 0);\n            doemit('Step Detector', x);\n            break;\n        case 'Location':\n            function emitLocationFeatures() {\n                var distance = 0.0,\n                    i = 1,\n                    prev,\n                    current;\n                for (; i < doc.data.length; i += 1) {\n                    prev = doc.data[i - 1];\n                    current = doc.data[i];\n                    distance += calcDistance(prev.latitude,\n                                             prev.longitude,\n                                             current.latitude,\n                                             current.longitude);\n                }\n                doemit('travel-distance', distance);\n            }\n\n            emitLocationFeatures();\n            break;\n        }\n        break;\n    case 'nokia-data':\n        let dateObj = new Date(doc.timestamp);\n        let timestamp = dateObj.getTime();\n        for (key in doc.value) {\n            if (doc.value.hasOwnProperty(key)) {\n                doemit(key, doc.value[key], timestamp);\n            }\n        }\n        break;\n    }\n}",
            "reduce": "function reduce(key, values, rereduce) {\n    var sum = function (xs) {\n            return xs.reduce(function (a, b) {\n                return a + b;\n            }, 0);\n        },\n        getPropertyValues = function (xs, propertyName) {\n            return xs.map(function (x) {\n                return x[propertyName];\n            });\n        },\n        sums, counts, mins, maxs, sumsqrs;\n\n    if (rereduce) {\n        sums = getPropertyValues(values, 'sum');\n        counts = getPropertyValues(values, 'count');\n        mins = getPropertyValues(values, 'min');\n        maxs = getPropertyValues(values, 'max');\n        sumsqrs = getPropertyValues(values, 'sumsqr');\n\n        return {\n            sum: sum(sums),\n            count: sum(counts),\n            min: Math.min.apply(null, mins),\n            max: Math.max.apply(null, maxs),\n            sumsqr: sum(sumsqrs)\n        };\n    }\n    else {\n        // Mapping of non-numeric values for **system** attributes to numeric\n        // values.\n        values = values.map(function (x, i) {\n            if (key[i][1] === 'medicine') {\n                return typeof(x) === 'number' ? x : 2;\n            }\n            if (key[i][1] === 'skills') {\n                return x.length;\n            }\n            if (key[i][1] === 'active-trigger') {\n                return 1;\n            }\n            if (key[i][1] === 'archived-active-trigger') {\n                return 1;\n            }\n            return x;\n        });\n\n        values = values.filter(function (x) {\n            return typeof(x) === 'number';\n        });\n        sumsqrs = values.map(function (x) {\n            return x * x;\n        });\n\n        return {\n            sum: sum(values),\n            count: values.length,\n            min: Math.min.apply(null, values),\n            max: Math.max.apply(null, values),\n            sumsqr: sum(sumsqrs)\n        };\n    }\n}"
        }
    }
}
