{
    "_id": "_design/primary",
    "views": {
        "association": {
            "map": "function map(doc, meta) {\n    if (doc.type === 'association') {\n        var value = {\n            userId: doc.user_id,\n            userEmail: doc.userEmail,\n            followerId: doc.followerId,\n            followerEmail: doc.followerEmail,\n            initiatorId: doc.initiatorId\n        };\n        emit([doc.user_id, !!doc.accepted], value);\n        emit([doc.followerId, !!doc.accepted], value);\n    }\n}"
        },
        "clinic-types": {
            "map": "function map(doc, meta) {\n    let clinicId = doc.clinicId || doc.clinic_id;\n    let hasAccountId = doc.hasOwnProperty('accountId') || doc.hasOwnProperty('user_id');\n    let isClinicDoc = clinicId > 0 && !hasAccountId && doc.hasOwnProperty('type');\n\n    if (isClinicDoc) {\n        emit([clinicId, doc.type], null);\n    }\n}"
        },
        "group-documents": {
            "map": "function map(doc, meta) {\n    if (doc.type && doc.groups) {\n        var type = doc.type;\n        if (doc.type === 'view-configuration' && doc.viewName) {\n            type += '_' + doc.viewName;\n        }\n\n        doc.groups.forEach(function (gid) {\n            emit([gid, type], null);\n        });\n    }\n}"
        },
        "names": {
            "map": "function map(doc, meta) {\n    if (doc.type === 'user_details') {\n        emit(doc.user_id, {\n            first_name: doc.first_name,\n            middle_name: doc.middle_name,\n            surname: doc.surname,\n            user_id: doc.user_id,\n            pidnr: doc.pidnr\n        });\n    }\n}"
        },
        "patient-types": {
            "map": "function map(doc, meta) {\n    let accountId = doc.accountId || doc.user_id;\n    let isAccountDoc = accountId > 0 && doc.hasOwnProperty('type');\n\n    if (isAccountDoc) {\n        emit([accountId, doc.type], 1);\n        if (doc.date) {\n            emit([accountId, doc.type, doc.date], 1);\n        }\n        else if (doc.endDate) {\n            emit([accountId, doc.type, doc.endDate], 1);\n        }\n    }\n}"
        },
        "references": {
            "map": "function map(doc, meta) {\n    var emitInstanceRef =\n        function(reference, instanceType, instanceId, displayName) {\n            var owner = (doc.accountId || doc.user_id)\n                ? 'AccountInstanceReference'\n                : 'ClinicInstanceReference';\n            emit([\n                reference.clinicId, reference.instanceType, reference.instanceId\n            ], {\n                clinicId: doc.clinicId || doc.clinic_id,\n                accountId: doc.accountId || doc.user_id,\n                displayName: displayName,\n                instanceId: instanceId,\n                instanceType: instanceType,\n                instanceOwner: owner\n            });\n        }\n\n    var emitDocumentRef = function(reference) {\n        var owner = (doc.accountId || doc.user_id)\n            ? 'AccountDocumentReference'\n            : 'ClinicDocumentReference';\n        emit([\n            reference.clinicId, reference.instanceType, reference.instanceId\n        ], {\n            clinicId: doc.clinicId || doc.clinic_id,\n            accountId: doc.accountId || doc.user_id,\n            documentType: doc.type,\n            documentId: meta.id,\n            documentOwner: owner,\n            referenceType: 'DocumentReference'\n        });\n    }\n\n    switch(doc.type) {\n    case 'treatment-plans': {\n        Object.keys(doc.instances).forEach(function(planKey) {\n            var treatmentPlan = doc.instances[planKey];\n\n            Object.keys(treatmentPlan.items).forEach(function(itemKey) {\n                var task = treatmentPlan.items[itemKey].task;\n\n                switch(task.taskDescriptorType) {\n                case \"AssignSelfAssessmentTaskDescriptor\":\n                case \"UnassignSelfAssessmentTaskDescriptor\":\n                case \"AssignTopicTaskDescriptor\":\n                case \"UnassignTopicTaskDescriptor\":\n                    emitInstanceRef(\n                        task.reference,\n                        'treatment-plan',\n                        planKey,\n                        treatmentPlan.name);\n                    break;\n                case \"EmaTaskDescriptor\":\n                    emitInstanceRef(task.questionnaire,\n                        'treatment-plan',\n                        planKey,\n                        treatmentPlan.name);\n                    break;\n                }\n            });\n        });\n        break;\n    }\n\n    case 'topics': {\n        Object.keys(doc.instances).forEach(function(topicKey) {\n            var topic = doc.instances[topicKey];\n            if (topic.article) {\n                emitInstanceRef(\n                    topic.article,\n                    'topic',\n                    topicKey,\n                    topic.title);\n            }\n        });\n        break;\n    }\n\n    case 'articles': {\n        Object.keys(doc.instances).forEach(function(articleKey) {\n            var article = doc.instances[articleKey];\n\n            article.content\n                .filter(function(c) {\n                    return c.articleContentType === \"ArticleLinksContent\";\n                })\n                .forEach(function(content) {\n                    content.links.forEach(function(link) {\n                        if (link.instanceOwner) {\n                            emitInstanceRef(\n                                link,\n                                'article',\n                                articleKey,\n                                article.title);\n                        }\n                    });\n                });\n        });\n        break;\n    }\n\n    case 'clinic-defaults': {\n        [\n            doc.consultationQuestionnaireTemplates.preparation,\n            doc.consultationQuestionnaireTemplates.evaluation,\n            doc.patientRatingTemplate\n        ]\n        .filter(function(x) { return !!x; })\n        .forEach(function(reference) {\n            emitDocumentRef(reference);\n        });\n        break;\n    }\n\n    case 'patient-plan': {\n        var treatmentPlanRefs = Object.values(doc.instances)\n            .map(function(x) { return x.treatmentPlan; });\n        var refs = Object.values(doc.consultationQuestionnaireTemplates)\n            .map(function(tmpls) {\n                return [tmpls.preparation, tmpls.evaluation];\n            })\n        refs = [].concat.apply([], refs)\n            .concat(doc.selfAssessments)\n            .concat(doc.psychoeducationTopics)\n            .concat(treatmentPlanRefs)\n            .filter(function(x) { return !!x; });\n\n        refs.forEach(function(reference) {\n            emitDocumentRef(reference);\n        });\n        break;\n    }\n    }\n}"
        }
    }
}
